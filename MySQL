/* This project was used to enhance my SQL queriing skills. This project focused on analzying website traffic on this fictional company "Maven Fuzzy Factory".  The below code is everything that was taught in the course and even some of the indiviual projects we were tasked with throughout the course. */

/*First Task: Understanding top traffic sources broken down into three categories (UTM source, campaign, and referring domain) */

SELECT 
    utm_source,
    utm_campaign,
    http_referer,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_sessions 
WHERE created_at < '2012-04-12'
GROUP BY 1,2,3
ORDER BY 4 DESC;


# Take away 1: we know understand where most of the traffic is coming from but we now need to look deeper into how many of the sessions are being converted into orders.

/* Task 2: Calculate the conversion rate from sessions to orders.  The goal for conversions is at least 4% and if the value is lower than they will need to reconsider their marketing bids per source. */

SELECT 
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_conv_rate
FROM website_sessions
	LEFT JOIN orders
	   ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-04-14'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand';

# Take Away 2: The conversion rate os 2.88%, therefore the manager notices they will need to dial back their search bids since they are currently overspending.  This analysis just helped the company save money!

/* Task 3: A new bid was placed and our manager is now looking for trended session volume by week. Email was sent on '2012-05-10' so we must take that into consideration */

SELECT 
    -- YEAR(created_at) AS yr,
    -- WEEK(created_at) AS wk,
    MIN(DATE(created_at)) AS week_started_at,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_sessions
WHERE created_at < '2012-05-12'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
GROUP BY 
    YEAR(created_at),
    WEEK(created_at);

# Take Away 3: Reducing the bid on gsearch nonbrand shows that campaign is fairly sensitive to changes (session volume decreased week over week after the bid reduction). 

/* Task 4: Find conversion rates from sessions to order by device type and see which one should be given more resources towards. Ex (desktop, mobile) */

SELECT 
    website_sessions.device_type,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conv_rate
FROM website_sessions
	LEFT JOIN orders
	   ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-05-11'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
GROUP BY website_sessions.device_type;

# Take Away 4: Given the data provided, desktop conversion was higher then mobile. Therefore bids will be increased on desktop ads.

/* Task 5: Pull up weekly trend information for both mobile and desktop after the new bids were submitted and determine the impact on volume using '2012-04-15' as the bid change baseline. */

SELECT 
    -- YEAR(created_at) AS yr,
    -- WEEK(created_at) AS wk,
    MIN(DATE(created_at)) AS week_start_date,
    COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_session_id ELSE NULL END) AS dtop_sessions,
    COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN website_session_id ELSE NULL END) AS mob_sessions
FROM website_sessions
WHERE created_at > '2012-04-15'
    AND created_at < '2012-06-09'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
GROUP BY
    YEAR(created_at),
    WEEK(created_at)

# Take Away 5: Given the changes in bids, we did see an increase in volume on desktop but not on mobile. Therefore bidding more on desktop adds is driving more volume which is what our manager was looking to see!


** New Concept: temporary tables **
/* The following code shows that the home page is where every user is beginning their session */

CREATE TEMPORARY TABLE first_pageview
SELECT 
    website_session_id,
    MIN(website_pageview_id) AS min_pv_id
FROM website_pageviews
WHERE website_pageview_id < 1000
GROUP BY website_session_id;

SELECT 
    website_pageviews.pageview_url AS landing_page,
    COUNT(DISTINCT first_pageview.website_session_id) AS sessions_hitting_this_lander 
FROM first_pageview
    LEFT JOIN website_pageviews
	 ON first_pageview.min_pv_id = website_pageviews.website_pageview_id
GROUP BY 
    website_pageviews.pageview_url;

/* Task 6: We want to find out the most viewed website pages, and rank them by their volume */

SELECT 
    pageview_url,
    COUNT(DISTINCT website_session_id) AS sessions
FROM website_pageviews
WHERE created_at < '2012-06-09'
GROUP BY 
    pageview_url
ORDER BY 
    sessions DESC;

# Take Away 6: We can either focus on the pages with the most traffic and continue to optimize them or we could focus on the lowest visited pages to see if they would add any value to optimize.

/* Task 7: Extract a list of the top entry pages and rank them by volume */

CREATE TEMPORARY TABLE first_pv_per_session
SELECT
    website_session_id,
    MIN(website_pageview_id) AS first_pv
FROM website_pageviews
WHERE created_at < '2012-06-12'
GROUP BY website_session_id;

SELECT 
    website_pageviews.pageview_url AS landing_page_url,
    COUNT(DISTINCT first_pv_per_session.website_session_id) AS sessions_hitting_page
FROM first_pv_per_session
   LEFT JOIN website_pageviews
	ON first_pv_per_session.first_pv = website_pageviews.website_pageview_id
GROUP BY website_pageviews.pageview_url

# Take Away 7:  Our search came back showing that every session started at the home page. Therefore the company should focus their efforts on optimizing the home page.

/* Task 8: Pull "bounce rate" for the traffic landing on the homepage url. Manager has asked us to provide the number of sessions, bounced sessions, and % of sessions bounced. */

CREATE TEMPORARY TABLE first_pageviews
SELECT 
    website_session_id,
    MIN(website_pageview_id) AS min_pageview_id
FROM website_pageviews
WHERE created_at < ' 2012-06-14'
GROUP BY 
    website_session_id;
   
CREATE TEMPORARY TABLE sessions_w_home_landing_page
SELECT 
    first_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
FROM first_pageviews
   LEFT JOIN website_pageviews
	ON website_pageviews.website_pageview_id = first_pageviews.min_pageview_id
WHERE website_pageviews.pageview_url = '/home';

CREATE TEMPORARY TABLE bounced_sessions
SELECT
    sessions_w_home_landing_page.website_session_id,
    sessions_w_home_landing_page.landing_page,
    COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
FROM sessions_w_home_landing_page
   LEFT JOIN website_pageviews
	ON website_pageviews.website_session_id = sessions_w_home_landing_page.website_session_id
GROUP BY
    sessions_w_home_landing_page.website_session_id,
    sessions_w_home_landing_page.landing_page
HAVING
    COUNT(website_pageviews.website_pageview_id) = 1;

SELECT 
    sessions_w_home_landing_page.website_session_id,
    bounced_sessions.website_session_id AS bounced_website_session_id
FROM sessions_w_home_landing_page
   LEFT JOIN bounced_sessions
	ON sessions_w_home_landing_page.website_session_id = bounced_sessions.website_session_id
ORDER BY 
    sessions_w_home_landing_page.website_session_id;
    
SELECT 
    COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS sessions,
    COUNT(DISTINCT bounced_sessions.website_session_id) AS bounced_sessions,
    COUNT(DISTINCT bounced_sessions.website_session_id)/COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS bounced_rate
FROM sessions_w_home_landing_page
   LEFT JOIN bounced_sessions
	ON sessions_w_home_landing_page.website_session_id = bounced_sessions.website_session_id;

# Take Away 8: The manager noticed that the bounce rate was very high for paid searches which she believes should be high quality traffic.  She plans to put together a custom landing page and test to see if the new page does better.

/* Task 9: Compare the bounce rates from the custom landing page against the original homepage */

SELECT
    MIN(created_at) AS first_created_at,
    MIN(website_pageview_id) AS first_pageview_id
FROM website_pageviews
WHERE pageview_url = '/lander-1'
    AND created_at IS NOT NULL;

CREATE TEMPORARY TABLE first_test_pageviews
SELECT
    website_pageviews.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS min_pageview_id
FROM website_pageviews
	INNER JOIN website_sessions
	ON website_sessions.website_session_id = website_pageviews.website_session_id
        AND website_sessions.created_at < '2012-07-28' 
        AND website_pageviews.website_pageview_id > 23504
        AND utm_source = 'gsearch'
        AND utm_campaign = 'nonbrand'
GROUP BY 
	website_pageviews.website_session_id;
    
CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_page
SELECT
    first_test_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
FROM first_test_pageviews
	LEFT JOIN website_pageviews
		ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
WHERE website_pageviews.pageview_url IN ('/home','/lander-1');

CREATE TEMPORARY TABLE nonbrand_test_bounced_sessions
SELECT 
    nonbrand_test_sessions_w_landing_page.website_session_id,
    nonbrand_test_sessions_w_landing_page.landing_page,
    COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
FROM nonbrand_test_sessions_w_landing_page
LEFT JOIN website_pageviews
	ON website_pageviews.website_session_id = nonbrand_test_sessions_w_landing_page.website_session_id
GROUP BY
    nonbrand_test_sessions_w_landing_page.website_session_id,
    nonbrand_test_sessions_w_landing_page.landing_page
HAVING
	COUNT(website_pageviews.website_pageview_id) = 1;
    
SELECT
   nonbrand_test_sessions_w_landing_page.landing_page,
   COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS sessions,
   COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id) AS bounced_sessions,
   COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id)/COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS bounce_rate
FROM  nonbrand_test_sessions_w_landing_page
   LEFT JOIN nonbrand_test_bounced_sessions
	ON  nonbrand_test_sessions_w_landing_page.website_session_id = nonbrand_test_bounced_sessions.website_session_id
GROUP BY 
   nonbrand_test_sessions_w_landing_page.landing_page

# Take Away 9: From our analysis, the customer page had a lower bounce rate %, so now our manager can focus the marketing campagins to the new landing page.
